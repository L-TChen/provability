{-# OPTIONS --without-K --cubical --guarded #-}

-- Most of definitions are from LaterPrims.agda

module Later where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Universes 

module Prims where
  primitive
    primLockUniv : ๐คโ ฬ
open Prims renaming (primLockUniv to LockU) public

infixl 4 _โ_
infixl 0 โน_
infixr -1 โน-syntax

private
  variable
    A : ๐ค ฬ
    B : A โ ๐ค ฬ

postulate
  Tick : LockU

โน_ : ๐ค ฬ โ ๐ค ฬ
โน A = (@tick ฮฑ : Tick) โ A

โธ_ : โน ๐ค ฬ โ ๐ค ฬ
โธ A  = (@tick ฮฑ : Tick) โ A ฮฑ

โน-syntax : โน ๐ค ฬ โ ๐ค ฬ
โน-syntax A = (@tick ฮฑ : Tick) โ A ฮฑ

syntax โน-syntax (ฮป ฮฑ โ e) = โน[ ฮฑ ] e

next_ : A โ โน A
next_ x k = x

_โ_ : โน ((a : A) โ B a)
  โ (a : โน A) โ โน[ ฮฑ ] B (a ฮฑ)
(f โ x) k = f k (x k)

โนmap : ((a : A) โ B a)
  โ (a : โน A) โ โน[ ฮฑ ] B (a ฮฑ)
โนmap f x k = f (x k)

ฮฃโน
  : ฮฃ (โน A) (ฮป โนx โ โน[ ฮฑ ] B (โนx ฮฑ))
  โ โน[ ฮฑ ] ฮฃ[ a โ A ] B a
ฮฃโน (x , y) ฮฑ = (x ฮฑ) , (y ฮฑ)

โนฮฃ
  : โน[ ฮฑ ] ฮฃ[ a โ A ] B a
  โ ฮฃ (โน A) ฮป โนx โ โน[ ฮฑ ] B (โนx ฮฑ)
โนฮฃ f = (ฮป ฮฑ โ fst (f ฮฑ)) , ฮป ฮฑ โ snd (f ฮฑ)

โน-extensionality : {A : I โ ๐ค ฬ} {x : โน A i0} {y : โน A i1}
  โ โน[ ฮฑ ] PathP A (x ฮฑ) (y ฮฑ) โ PathP (ฮป i โ โน A i) x y
โน-extensionality p i ฮฑ = p ฮฑ i

โนisPropโisPropโน : {A : โน ๐ค ฬ}
  โ โน[ ฮฑ ] isProp (A ฮฑ)
  โ isProp (โน[ ฮฑ ] (A ฮฑ))
โนisPropโisPropโน p x y = ฮป i ฮฑ โ p ฮฑ (x ฮฑ) (y ฮฑ) i

transpโน : (A : I โ โน ๐ค ฬ) โ โธ (A i0) โ โธ (A i1)
transpโน A = transp (ฮป i โ โธ (A i)) i0

hcompโน : (A : โน ๐ค ฬ) (ฯ : I) (u : I โ Partial ฯ (โธ A))
  โ (u0 : โธ A [ ฯ โฆ u i0 ]) โ โธ A
hcompโน A ฯ u u0 a = hcomp (ฮป { i (ฯ = i1) โ u i 1=1 a }) (outS u0 a)

postulate
  dfix   : (โน A โ A) โ โน A
  -- d is for deleayed.
  dfix-path : (f : โน A โ A) โ dfix f โก next (f (dfix f))

fix : (โน A โ A) โ A
fix f = f (dfix f)

fix-path : (f : โน A โ A) โ fix f โก f (next (fix f))
fix-path f i = f (dfix-path f i)
