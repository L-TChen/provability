module Prelude where

open import Agda.Builtin.FromNat                   public
  renaming (Number to HasFromNat)

open import Cubical.Foundations.Everything         public
  hiding (id; ‚Ñì-max; _‚â°‚ü®_‚ü©_; _‚àé; ‚â°‚ü®‚ü©-syntax; ‚ãÜ; ‚ü®_‚ü©; str; prop; Sub)
open import Cubical.Relation.Nullary               public
  hiding (‚ü™_‚ü´)
open import Cubical.HITs.PropositionalTruncation   public
  renaming (elim to truncElim; map to ‚à•-‚à•map)

open import Cubical.Data.Unit                      public
open import Cubical.Data.Empty                     public
  renaming (rec to ‚ä•rec; elim to ‚ä•-elim)
open import Cubical.Data.Bool                      public
  hiding (_‚âü_)
open import Cubical.Data.Nat                       public
  using (‚Ñï; zero; suc; _+_; _‚à∏_; fromNat‚Ñï; isSet‚Ñï)
open import Cubical.Data.Nat.Order.Recursive as ‚Ñï‚Çö public
  using (_‚â§_; _<_)
open import Cubical.Data.FinData                   public
  using (Fin)
  renaming (zero to fzero; suc to fsuc)

open import Prelude.Universe                       public

private
  variable
    n m   : ‚Ñï
    A B C : ùì§ Ãá

infix  4  _‚â¢_
infixr -1 _‚ûù_
infixr -2 Œ† Œ£‚Ä≤ ‚àÉ‚Ä≤ 

_‚â¢_ : {A : ùì§ Ãá} ‚Üí A ‚Üí A ‚Üí ùì§ Ãá
x ‚â¢ y = x ‚â° y ‚Üí ‚ä•

------------------------------------------------------------------------
-- Œ† x ‚à∂ A , Œ£ a ‚à∂ A , ‚àÉ a ‚à∂ A notation in Type Theory

syntax Œ†  {A = A} (Œª x ‚Üí b) = Œ†[ x ‚à∂ A ] b
syntax Œ£‚Ä≤ {A = A} (Œª x ‚Üí b) = Œ£[ x ‚à∂ A ] b
syntax ‚àÉ‚Ä≤ {A = A} (Œª x ‚Üí b) = ‚àÉ[ x ‚à∂ A ] b

_√ó_ : ‚àÄ {‚Ñì ‚Ñì'} (A : Type ‚Ñì) (B : Type ‚Ñì') ‚Üí Type (‚Ñì ‚äî ‚Ñì')
A √ó B = Œ£ A (Œª _ ‚Üí B)

infixr 5 _√ó_

Œ† : (B : A ‚Üí ùì• Ãá) ‚Üí (universe-of A) ‚äî ùì• Ãá
Œ† {A = A} B = (x : A) ‚Üí B x

Œ£‚Ä≤ : (B : A ‚Üí ùì• Ãá) ‚Üí (universe-of A) ‚äî ùì• Ãá
Œ£‚Ä≤ {A = A} B = Œ£ A B

‚àÉ‚Ä≤ : (B : A ‚Üí ùì• Ãá) ‚Üí (universe-of A) ‚äî ùì• Ãá
‚àÉ‚Ä≤ {A = A} B = ‚à• Œ£ A B ‚à•

_‚ûù_ : ùì§ Ãá ‚Üí ùì• Ãá ‚Üí ùì§ ‚äî ùì• Ãá
A ‚ûù B = A ‚Üí B

‚à•_‚à•* : ùì§ Ãá ‚Üí ùì§ ‚äî ùì• Ãá
‚à•_‚à•* {ùì• = ùì•} X = ‚à• Lift {j = ùì•} X ‚à•

‚ä•*-elim : ‚ä•* {ùì§} ‚Üí A
‚ä•*-elim ()

pattern ‚à£_‚à£* x = ‚à£ lift x ‚à£

isSet‚Üí : {A : ùì§ Ãá} {B : ùì• Ãá} ‚Üí isSet B ‚Üí isSet (A ‚Üí B)
isSet‚Üí pB = isSetŒ† Œª _ ‚Üí pB

isSetImplicitŒ† : {B : A ‚Üí ùì• Ãá}
  ‚Üí (h : (x : A) ‚Üí isSet (B x)) ‚Üí isSet ({x : A} ‚Üí B x)
isSetImplicitŒ† h f g p q i j {x} = h x (f {x}) (g {x}) (Œª i ‚Üí p i {x}) (Œª i ‚Üí q i {x}) i j

isSetImplicitŒ†2 : {B : A ‚Üí ùì• Ãá} {C : (x : A) ‚Üí (y : B x) ‚Üí ùì¶ Ãá}
  ‚Üí (h : (x : A) (y : B x) ‚Üí isSet (C x y)) ‚Üí isSet ({x : A} {y : B x} ‚Üí C x y)
isSetImplicitŒ†2 h = isSetImplicitŒ† Œª x ‚Üí isSetImplicitŒ† Œª y ‚Üí h x y

------------------------------------------------------------------------------
-- Some properties about relation

_respects_on-the-left : {A : ùì§ Ãá} {B : ùì• Ãá}
  ‚Üí (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí (_‚àº_ : A ‚Üí A ‚Üí ùì§ Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_respects_on-the-left {ùì§} {ùì•} {A} {B} _‚âà_ _‚àº_  = {x x‚Ä≤ : A} {y : B} ‚Üí x ‚àº x‚Ä≤ ‚Üí x‚Ä≤ ‚âà y ‚Üí x ‚âà y

_respects_on-the-right : {A : ùì§ Ãá} {B : ùì• Ãá}
  ‚Üí (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí (_‚àº_ : B ‚Üí B ‚Üí ùì• Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_respects_on-the-right {ùì§} {ùì•} {A} {B} _‚âà_ _‚àº_ = {y y‚Ä≤ : B} {x : A} ‚Üí y ‚àº y‚Ä≤ ‚Üí x ‚âà y‚Ä≤ ‚Üí x ‚âà y

_IsRightTotal : {A : ùì§ Ãá} {B : ùì• Ãá} (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_IsRightTotal {ùì§} {ùì•} {A} {B} _‚âà_ = (y : B) ‚Üí ‚àÉ[ x ‚à∂ A ] (x ‚âà y)

_IsLeftTotal : {A : ùì§ Ãá} {B : ùì• Ãá} (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_IsLeftTotal {ùì§} {ùì•} {A} {B} _‚âà_ = (x : A) ‚Üí ‚àÉ[ y ‚à∂ B ] (x ‚âà y)

------------------------------------------------------------------------
-- Some simple functions

id : A ‚Üí A
id = Œª x ‚Üí x

------------------------------------------------------------------------------
-- 

record SetWithStr (ùì§ : Universe) (S : ùì§ Ãá ‚Üí ùì• Ãá) : ùì• ‚äî ùì§ ‚Å∫ Ãá  where
  constructor _,_
  field
    carrier   : hSet ùì§
    structure : S (fst carrier)
open SetWithStr

‚ü®_‚ü© : {S : ùì§ Ãá ‚Üí ùì• Ãá} ‚Üí SetWithStr ùì§ S ‚Üí ùì§ Ãá
‚ü® X ‚ü© = carrier X .fst

str : {S : ùì§ Ãá ‚Üí ùì• Ãá} ‚Üí (X : SetWithStr ùì§ S) ‚Üí S ‚ü® X ‚ü©
str (X , s) = s

_is-set : {S : ùì§ Ãá ‚Üí ùì• Ãá}
  ‚Üí (X : SetWithStr ùì§ S) ‚Üí isSet ‚ü® X ‚ü©
(X , _) is-set = X .snd

Rel : ùì§ Ãá ‚Üí ùì• Ãá ‚Üí (ùì§ ‚äî ùì•) ‚Å∫ Ãá
Rel {ùì§} {ùì•} A B = A ‚Üí B ‚Üí (ùì§ ‚äî ùì•) Ãá 

MRel : ùì§ Ãá ‚Üí ùì• Ãá ‚Üí (ùì§ ‚äî ùì•) ‚Å∫ Ãá
MRel {ùì§} {ùì•} A B = Œ£[ R ‚à∂ A ‚ûù B ‚ûù (ùì§ ‚äî ùì•) Ãá ] ((x : A) (y : B) ‚Üí isProp (R x y))

------------------------------------------------------------------------------
-- 

module ‚â°-Reasoning where
  open import Cubical.Foundations.Prelude public
    using (_‚â°‚ü®_‚ü©_; ‚â°‚ü®‚ü©-syntax; _‚àé)

  infix  1 begin_
  infixr 2 _‚â°‚ü®‚ü©_
  
  begin_ : {x y : A} (r : x ‚â° y) ‚Üí x ‚â° y
  begin x=y = x=y

  _‚â°‚ü®‚ü©_ : (x {y} : A) ‚Üí x ‚â° y ‚Üí x ‚â° y
  x ‚â°‚ü®‚ü© x‚â°y = x‚â°y

_‚â§?_ : (m n : ‚Ñï) ‚Üí Dec (m ‚â§ n)
zero  ‚â§? _     = yes tt
suc m ‚â§? zero  = no Œª ()
suc m ‚â§? suc n = m ‚â§? n

strict-initial : {X : ùì§ Ãá} ‚Üí (X ‚Üí ‚ä•* {ùì§}) ‚Üí X ‚âÉ (‚ä•* {ùì§})
strict-initial f = f , record { equiv-proof = Œª { () } }

------------------------------------------------------------------------------
-- Encode-decode method, decidable equality 

record Code (A : ùì§ Ãá) :  ùì§ ‚Å∫ Ãá where
  field
    code   : A ‚Üí A ‚Üí ùì§ Ãá
    r      : (a : A)   ‚Üí code a a
    decode : {a b : A} ‚Üí code a b ‚Üí a ‚â° b

  encode : {a b : A} ‚Üí a ‚â° b    ‚Üí code a b
  encode {a = a} a=b = transport (cong (code a) a=b) (r a)
open Code ‚¶É ... ‚¶Ñ public

{-# DISPLAY Code.code x y = code x y  #-}
{-# DISPLAY Code.r x      = r x       #-}
{-# DISPLAY Code.decode c = decode c  #-}
{-# DISPLAY Code.encode p = encode p  #-}

private
  code‚Ñï : (m n : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
  code‚Ñï zero    zero    = Unit
  code‚Ñï (suc m) (suc n) = code‚Ñï m n
  code‚Ñï zero    (suc n) = ‚ä•
  code‚Ñï (suc m) zero    = ‚ä•

  r‚Ñï : (n : ‚Ñï) ‚Üí code‚Ñï n n
  r‚Ñï zero    = tt
  r‚Ñï (suc n) = r‚Ñï n

  decode‚Ñï : {m n : ‚Ñï}
    ‚Üí (code‚Ñï m n) ‚Üí m ‚â° n
  decode‚Ñï {zero}  {zero}  r = refl
  decode‚Ñï {suc m} {suc n} r = cong suc (decode‚Ñï r)

instance
  Code‚Ñï : Code ‚Ñï
  Code‚Ñï = record { code = code‚Ñï ; r = r‚Ñï ; decode = decode‚Ñï }

private
  codeFin : (i j : Fin n) ‚Üí ùì§‚ÇÄ Ãá
  codeFin fzero    fzero    = Unit
  codeFin (fsuc i) (fsuc j) = codeFin i j
  codeFin fzero    (fsuc _) = ‚ä•
  codeFin (fsuc _) fzero    = ‚ä•

  rFin : (i : Fin n) ‚Üí codeFin i i
  rFin {n} fzero = tt
  rFin (fsuc i)  = rFin i

  decodeFin : {i j : Fin n} 
    ‚Üí (r : codeFin i j)
    ‚Üí i ‚â° j
  decodeFin {.(suc _)} {fzero}  {fzero}  _ = refl
  decodeFin {.(suc _)} {fsuc i} {fsuc j} r = cong fsuc (decodeFin r)

instance
  CodeFin : Code (Fin n)
  CodeFin = record { code = codeFin ; r = rFin ; decode = decodeFin }
  
record IsDiscrete (A : ùì§ Ãá) : ùì§ Ãá where
  field
    _‚âü_ : (x y : A) ‚Üí Dec (x ‚â° y)

  ‚âü‚ÜíisSet : isSet A
  ‚âü‚ÜíisSet = Discrete‚ÜíisSet _‚âü_
open IsDiscrete ‚¶É ... ‚¶Ñ public

{-# DISPLAY IsDiscrete._‚âü_ x y = x ‚âü y #-}
  
instance
  IsDiscreteUnit : IsDiscrete Unit
  IsDiscreteUnit = record { _‚âü_ = Œª {tt tt ‚Üí yes refl} }

  IsDiscreteBool : IsDiscrete Bool
  _‚âü_ ‚¶É IsDiscreteBool ‚¶Ñ = Cubical.Data.Bool._‚âü_

  IsDiscrete‚Ñï : IsDiscrete ‚Ñï
  _‚âü_ ‚¶É IsDiscrete‚Ñï ‚¶Ñ = Cubical.Data.Nat.discrete‚Ñï 

  IsDiscreteFin : IsDiscrete (Fin n)
  _‚âü_ ‚¶É IsDiscreteFin ‚¶Ñ = Cubical.Data.FinData.discreteFin
