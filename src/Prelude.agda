{-# OPTIONS --without-K --cubical --no-import-sorts #-}

module Prelude where

open import Agda.Builtin.FromNat                 public
  renaming (Number to HasFromNat)

open import Cubical.Foundations.Everything       public
  hiding (id; ‚Ñì-max; _‚â°‚ü®_‚ü©_; _‚àé; ‚â°‚ü®‚ü©-syntax; ‚ãÜ; ‚ü®_‚ü©; str)
open import Cubical.Relation.Nullary             public
  hiding (‚ü™_‚ü´)
open import Cubical.HITs.PropositionalTruncation public
  renaming (elim to truncElim; map to ‚à•-‚à•map)

open import Cubical.Data.Sigma                     public
open import Cubical.Data.Unit                      public
open import Cubical.Data.Empty                     public
  renaming (rec to ‚ä•rec; elim to ‚ä•-elim)
open import Cubical.Data.Bool                      public
  hiding (_‚âü_)
open import Cubical.Data.Nat                       public
  using (‚Ñï; zero; suc; _+_; _‚à∏_; fromNat‚Ñï; isSet‚Ñï)
open import Cubical.Data.Nat.Order.Recursive as ‚Ñï‚Çö public
  using (_‚â§_; _<_)
open import Cubical.Data.FinData                   public
  using (Fin)
  renaming (zero to fzero; suc to fsuc)

open import Prelude.Universes public
open import Prelude.Notations public
open import Prelude.Instances public


private
  variable
    A B C : ùì§ Ãá
    n m   : ‚Ñï

‚à•_‚à•* : ùì§ Ãá ‚Üí ùì§ ‚äî ùì• Ãá
‚à•_‚à•* {ùì• = ùì•} X = ‚à• Lift {j = ùì•} X ‚à•

‚ä•*-elim : ‚ä•* {ùì§} ‚Üí A
‚ä•*-elim ()

pattern ‚à£_‚à£* x = ‚à£ lift x ‚à£

isSet‚Üí : {A : ùì§ Ãá} {B : ùì• Ãá} ‚Üí isSet B ‚Üí isSet (A ‚Üí B)
isSet‚Üí pB = isSetŒ† Œª _ ‚Üí pB

------------------------------------------------------------------------------
-- Some properties about relation

_respects_on-the-left : {A : ùì§ Ãá} {B : ùì• Ãá}
  ‚Üí (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí (_‚àº_ : A ‚Üí A ‚Üí ùì§ Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_respects_on-the-left {ùì§} {ùì•} {A} {B} _‚âà_ _‚àº_  = {x x‚Ä≤ : A} {y : B} ‚Üí x ‚àº x‚Ä≤ ‚Üí x‚Ä≤ ‚âà y ‚Üí x ‚âà y

_respects_on-the-right : {A : ùì§ Ãá} {B : ùì• Ãá}
  ‚Üí (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí (_‚àº_ : B ‚Üí B ‚Üí ùì• Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_respects_on-the-right {ùì§} {ùì•} {A} {B} _‚âà_ _‚àº_ = {y y‚Ä≤ : B} {x : A} ‚Üí y ‚àº y‚Ä≤ ‚Üí x ‚âà y‚Ä≤ ‚Üí x ‚âà y

_IsRightTotal : {A : ùì§ Ãá} {B : ùì• Ãá} (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_IsRightTotal {ùì§} {ùì•} {A} {B} _‚âà_ = (y : B) ‚Üí ‚àÉ[ x Íûâ A ] (x ‚âà y)

_IsLeftTotal : {A : ùì§ Ãá} {B : ùì• Ãá} (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_IsLeftTotal {ùì§} {ùì•} {A} {B} _‚âà_ = (x : A) ‚Üí ‚àÉ[ y Íûâ B ] (x ‚âà y)

------------------------------------------------------------------------
-- Some simple functions

id : A ‚Üí A
id = Œª x ‚Üí x

------------------------------------------------------------------------------
-- 

instance
  hSet‚ÜíType : Coercion (hSet ùì§) (ùì§ Ãá)
  hSet‚ÜíType = record { ‚ü®_‚ü© = fst }

  hProp‚ÜíType : Coercion (hProp ùì§) (ùì§ Ãá)
  hProp‚ÜíType = record { ‚ü®_‚ü© = fst }
  
  TypeStr‚ÜíType : {S : ùì§ Ãá ‚Üí ùì• Ãá} ‚Üí Coercion (TypeWithStr ùì§ S) (ùì§ Ãá)
  TypeStr‚ÜíType = record { ‚ü®_‚ü© = fst }

------------------------------------------------------------------------------
-- 

record SetWithStr (ùì§ : Universe) (S : ùì§ Ãá ‚Üí ùì• Ãá) : ùì• ‚äî ùì§ ‚Å∫ Ãá where
  constructor _,_
  field
    carrier   : hSet ùì§
    structure : S ‚ü® carrier ‚ü©

  toTypeStr : TypeWithStr ùì§ S
  toTypeStr = ‚ü® carrier ‚ü© , structure

  _is-set : isSet ‚ü® carrier ‚ü©
  _is-set = carrier .snd

open SetWithStr public
  renaming (structure to str)

module _ {S : ùì§ Ãá ‚Üí ùì• Ãá} where
  instance
    SetStr‚ÜíType : Coercion (SetWithStr ùì§ S) (ùì§ Ãá)
    ‚ü®_‚ü© ‚¶É SetStr‚ÜíType ‚¶Ñ (carrier , _) = ‚ü® carrier ‚ü©

--    SetStr‚ÜíTypeStr : Coercion (SetWithStr ùì§ S) (TypeWithStr ùì§ S)
--    ‚ü®_‚ü© ‚¶É SetStr‚ÜíTypeStr ‚¶Ñ (carrier , str) = ‚ü® carrier ‚ü© , str

Rel : ùì§ Ãá ‚Üí ùì• Ãá ‚Üí (ùì§ ‚äî ùì•) ‚Å∫ Ãá
Rel {ùì§} {ùì•} A B = A ‚Üí B ‚Üí (ùì§ ‚äî ùì•) Ãá 

MRel : ùì§ Ãá ‚Üí ùì• Ãá ‚Üí (ùì§ ‚äî ùì•) ‚Å∫ Ãá
MRel {ùì§} {ùì•} A B = Œ£[ R Íûâ A ‚ûù B ‚ûù (ùì§ ‚äî ùì•) Ãá ] ((x : A) (y : B) ‚Üí isProp (R x y))

instance
  MRel‚ÜíRel : Coercion (MRel A B) (Rel A B)
  MRel‚ÜíRel = record { ‚ü®_‚ü© = fst }

------------------------------------------------------------------------------
-- 

module ‚â°-Reasoning where
  open import Cubical.Foundations.Prelude public
    using (_‚â°‚ü®_‚ü©_; ‚â°‚ü®‚ü©-syntax; _‚àé)

  infix  1 begin_
  infixr 2 _‚â°‚ü®‚ü©_
  
  begin_ : {x y : A} (r : x ‚â° y) ‚Üí x ‚â° y
  begin x=y = x=y

  _‚â°‚ü®‚ü©_ : (x {y} : A) ‚Üí x ‚â° y ‚Üí x ‚â° y
  x ‚â°‚ü®‚ü© x‚â°y = x‚â°y

_‚â§?_ : (m n : ‚Ñï) ‚Üí Dec (m ‚â§ n)
zero  ‚â§? _     = yes tt
suc m ‚â§? zero  = no Œª ()
suc m ‚â§? suc n = m ‚â§? n

strict-initial : {X : ùì§ Ãá} ‚Üí (X ‚Üí ‚ä•* {ùì§}) ‚Üí X ‚âÉ (‚ä•* {ùì§})
strict-initial f = f , record { equiv-proof = Œª { () } }

------------------------------------------------------------------------------
-- Encode-decode method, decidable equality 

record Code (A : ùì§ Ãá) :  ùì§ ‚Å∫ Ãá where
  field
    code   : A ‚Üí A ‚Üí ùì§ Ãá
    r      : (a : A)   ‚Üí code a a
    decode : {a b : A} ‚Üí code a b ‚Üí a ‚â° b

  encode : {a b : A} ‚Üí a ‚â° b    ‚Üí code a b
  encode {a = a} a=b = transport (cong (code a) a=b) (r a)
open Code ‚¶É ... ‚¶Ñ public

{-# DISPLAY Code.code x y = code x y  #-}
{-# DISPLAY Code.r x      = r x       #-}
{-# DISPLAY Code.decode c = decode c  #-}
{-# DISPLAY Code.encode p = encode p  #-}

private
  code‚Ñï : (m n : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
  code‚Ñï zero    zero    = Unit
  code‚Ñï (suc m) (suc n) = code‚Ñï m n
  code‚Ñï zero    (suc n) = ‚ä•
  code‚Ñï (suc m) zero    = ‚ä•

  r‚Ñï : (n : ‚Ñï) ‚Üí code‚Ñï n n
  r‚Ñï zero    = tt
  r‚Ñï (suc n) = r‚Ñï n

  decode‚Ñï : {m n : ‚Ñï}
    ‚Üí (code‚Ñï m n) ‚Üí m ‚â° n
  decode‚Ñï {zero}  {zero}  r = refl
  decode‚Ñï {suc m} {suc n} r = cong suc (decode‚Ñï r)

instance
  Code‚Ñï : Code ‚Ñï
  Code‚Ñï = record { code = code‚Ñï ; r = r‚Ñï ; decode = decode‚Ñï }

private
  codeFin : (i j : Fin n) ‚Üí ùì§‚ÇÄ Ãá
  codeFin fzero    fzero    = Unit
  codeFin (fsuc i) (fsuc j) = codeFin i j
  codeFin fzero    (fsuc _) = ‚ä•
  codeFin (fsuc _) fzero    = ‚ä•

  rFin : (i : Fin n) ‚Üí codeFin i i
  rFin {n} fzero = tt
  rFin (fsuc i)  = rFin i

  decodeFin : {i j : Fin n} 
    ‚Üí (r : codeFin i j)
    ‚Üí i ‚â° j
  decodeFin {.(suc _)} {fzero}  {fzero}  _ = refl
  decodeFin {.(suc _)} {fsuc i} {fsuc j} r = cong fsuc (decodeFin r)

instance
  CodeFin : Code (Fin n)
  CodeFin = record { code = codeFin ; r = rFin ; decode = decodeFin }
  
instance
  IsDiscreteUnit : IsDiscrete Unit
  IsDiscreteUnit = record { _‚âü_ = Œª {tt tt ‚Üí yes refl} }

  IsDiscreteBool : IsDiscrete Bool
  _‚âü_ ‚¶É IsDiscreteBool ‚¶Ñ = Cubical.Data.Bool._‚âü_

  IsDiscrete‚Ñï : IsDiscrete ‚Ñï
  _‚âü_ ‚¶É IsDiscrete‚Ñï ‚¶Ñ = Cubical.Data.Nat.discrete‚Ñï 

  IsDiscreteFin : IsDiscrete (Fin n)
  _‚âü_ ‚¶É IsDiscreteFin ‚¶Ñ = Cubical.Data.FinData.discreteFin
