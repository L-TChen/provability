{-# OPTIONS --without-K --cubical #-}

module Prelude where

open import Agda.Builtin.FromNat                 public
  renaming (Number to HasFromNat)

open import Cubical.Foundations.Everything       public
  hiding (id; ‚Ñì-max; _‚â°‚ü®_‚ü©_; _‚àé; ‚â°‚ü®‚ü©-syntax)
open import Cubical.Relation.Nullary             public
  hiding (‚ü™_‚ü´)
open import Cubical.HITs.PropositionalTruncation public
  hiding (map)
  renaming (elim to truncElim)

open import Cubical.Data.Sigma                     public
open import Cubical.Data.Unit                      public
open import Cubical.Data.Empty                     public
  renaming (rec to ‚ä•rec; elim to ‚ä•-elim)
open import Cubical.Data.Bool                      public
  hiding (_‚âü_)
open import Cubical.Data.Nat                       public
  using (‚Ñï; zero; suc; _+_; _‚à∏_; fromNat‚Ñï)
open import Cubical.Data.Nat.Order.Recursive as ‚Ñï‚Çö public
  using (_‚â§_; _<_)

open import Universes public
open import Later     public

private
  variable
    A B C : ùì§ Ãá
    n m   : ‚Ñï

infixr -1 Œ† Œ£‚Ä≤ ‚àÉ‚Ä≤ _‚ûù_

infix 4 _‚â¢_
_‚â¢_ : {A : ùì§ Ãá} ‚Üí A ‚Üí A ‚Üí ùì§ Ãá
x ‚â¢ y = x ‚â° y ‚Üí ‚ä•

‚à•_‚à•* : ùì§ Ãá ‚Üí ùì§ ‚äî ùì• Ãá
‚à•_‚à•* {ùì• = ùì•} X = Lift {j = ùì•} ‚à• X ‚à•

‚ä•*-elim : ‚ä•* {ùì§} ‚Üí A
‚ä•*-elim ()

pattern ‚à£_‚à£* x = lift (‚à£_‚à£ x)

------------------------------------------------------------------------
-- Œ† x Íûâ A , Œ£ a Íûâ A , ‚àÉ a Íûâ A notation in Type Theory

syntax Œ†  {A = A} (Œª x ‚Üí b) = Œ†[ x Íûâ A ] b
syntax Œ£‚Ä≤ {A = A} (Œª x ‚Üí b) = Œ£[ x Íûâ A ] b
syntax ‚àÉ‚Ä≤ {A = A} (Œª x ‚Üí b) = ‚àÉ[ x Íûâ A ] b

Œ† : (B : A ‚Üí ùì• Ãá) ‚Üí (universe-of A) ‚äî ùì• Ãá
Œ† {A = A} B = (x : A) ‚Üí B x

Œ£‚Ä≤ : (B : A ‚Üí ùì• Ãá) ‚Üí (universe-of A) ‚äî ùì• Ãá
Œ£‚Ä≤ {A = A} B = Œ£ A B

‚àÉ‚Ä≤ : (B : A ‚Üí ùì• Ãá) ‚Üí (universe-of A) ‚äî ùì• Ãá
‚àÉ‚Ä≤ {A = A} B = ‚à• Œ£ A B ‚à•

_‚ûù_ : ùì§ Ãá ‚Üí ùì• Ãá ‚Üí ùì§ ‚äî ùì• Ãá
A ‚ûù B = A ‚Üí B

------------------------------------------------------------------------
-- Some simple functions

id : A ‚Üí A
id x = x

module ‚â°-Reasoning where
  open import Cubical.Foundations.Prelude public
    using (_‚â°‚ü®_‚ü©_; ‚â°‚ü®‚ü©-syntax; _‚àé)
  

_‚â§?_ : (m n : ‚Ñï) ‚Üí Dec (m ‚â§ n)
zero  ‚â§? _     = yes tt
suc m ‚â§? zero  = no Œª ()
suc m ‚â§? suc n = m ‚â§? n

record DecEq (A : ùì§ Ãá) : ùì§ Ãá where
  field
    _‚âü_ : (x y : A) ‚Üí Dec (x ‚â° y)

open DecEq ‚¶É ... ‚¶Ñ public

instance
  DecEqUnit : DecEq Unit
  DecEqUnit = record { _‚âü_ = Œª {tt tt ‚Üí yes refl} }

  DecEqBool : DecEq Bool
  _‚âü_ ‚¶É DecEqBool ‚¶Ñ = Cubical.Data.Bool._‚âü_
  
  DecEq‚Ñï : DecEq ‚Ñï
  _‚âü_ ‚¶É DecEq‚Ñï ‚¶Ñ x y with x ‚Ñï‚Çö.‚âü y
  ... | ‚Ñï‚Çö.eq x=y = yes x=y
  ... | ‚Ñï‚Çö.lt x<y = no (‚Ñï‚Çö.<‚Üí‚â¢ x<y)
  ... | ‚Ñï‚Çö.gt x>y = no Œª x=y ‚Üí ‚Ñï‚Çö.<‚Üí‚â¢ x>y (sym x=y)
