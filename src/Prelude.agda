{-# OPTIONS --without-K --cubical #-}

module Prelude where

open import Agda.Builtin.FromNat                 public
  renaming (Number to HasFromNat)

open import Cubical.Foundations.Everything       public
  hiding (id; ‚Ñì-max; _‚â°‚ü®_‚ü©_; _‚àé; ‚â°‚ü®‚ü©-syntax; ‚ãÜ)
open import Cubical.Relation.Nullary             public
  hiding (‚ü™_‚ü´)
open import Cubical.HITs.PropositionalTruncation public
  renaming (elim to truncElim; map to ‚à•-‚à•map)

open import Cubical.Data.Sigma                     public
open import Cubical.Data.Unit                      public
open import Cubical.Data.Empty                     public
  renaming (rec to ‚ä•rec; elim to ‚ä•-elim)
open import Cubical.Data.Bool                      public
  hiding (_‚âü_)
open import Cubical.Data.Nat                       public
  using (‚Ñï; zero; suc; _+_; _‚à∏_; fromNat‚Ñï)
open import Cubical.Data.Nat.Order.Recursive as ‚Ñï‚Çö public
  using (_‚â§_; _<_)

open import Universes public

private
  variable
    A B C : ùì§ Ãá
    n m   : ‚Ñï

infixr -1 Œ† Œ£‚Ä≤ ‚àÉ‚Ä≤ _‚ûù_

infix 4 _‚â¢_
_‚â¢_ : {A : ùì§ Ãá} ‚Üí A ‚Üí A ‚Üí ùì§ Ãá
x ‚â¢ y = x ‚â° y ‚Üí ‚ä•

‚à•_‚à•* : ùì§ Ãá ‚Üí ùì§ ‚äî ùì• Ãá
‚à•_‚à•* {ùì• = ùì•} X = Lift {j = ùì•} ‚à• X ‚à•

‚ä•*-elim : ‚ä•* {ùì§} ‚Üí A
‚ä•*-elim ()

pattern ‚à£_‚à£* x = lift (‚à£_‚à£ x)

------------------------------------------------------------------------
-- Œ† x Íûâ A , Œ£ a Íûâ A , ‚àÉ a Íûâ A notation in Type Theory

syntax Œ†  {A = A} (Œª x ‚Üí b) = Œ†[ x Íûâ A ] b
syntax Œ£‚Ä≤ {A = A} (Œª x ‚Üí b) = Œ£[ x Íûâ A ] b
syntax ‚àÉ‚Ä≤ {A = A} (Œª x ‚Üí b) = ‚àÉ[ x Íûâ A ] b

Œ† : (B : A ‚Üí ùì• Ãá) ‚Üí (universe-of A) ‚äî ùì• Ãá
Œ† {A = A} B = (x : A) ‚Üí B x

Œ£‚Ä≤ : (B : A ‚Üí ùì• Ãá) ‚Üí (universe-of A) ‚äî ùì• Ãá
Œ£‚Ä≤ {A = A} B = Œ£ A B

‚àÉ‚Ä≤ : (B : A ‚Üí ùì• Ãá) ‚Üí (universe-of A) ‚äî ùì• Ãá
‚àÉ‚Ä≤ {A = A} B = ‚à• Œ£ A B ‚à•

_‚ûù_ : ùì§ Ãá ‚Üí ùì• Ãá ‚Üí ùì§ ‚äî ùì• Ãá
A ‚ûù B = A ‚Üí B

------------------------------------------------------------------------------
-- Some properties about relation

_respects_on-the-left : {A : ùì§ Ãá} {B : ùì• Ãá}
  ‚Üí (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí (_‚àº_ : A ‚Üí A ‚Üí ùì§ Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_respects_on-the-left {ùì§} {ùì•} {A} {B} _‚âà_ _‚àº_  = {x x‚Ä≤ : A} {y : B} ‚Üí x ‚àº x‚Ä≤ ‚Üí x‚Ä≤ ‚âà y ‚Üí x ‚âà y

_respects_on-the-right : {A : ùì§ Ãá} {B : ùì• Ãá}
  ‚Üí (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí (_‚àº_ : B ‚Üí B ‚Üí ùì• Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_respects_on-the-right {ùì§} {ùì•} {A} {B} _‚âà_ _‚àº_ = {y y‚Ä≤ : B} {x : A} ‚Üí y ‚àº y‚Ä≤ ‚Üí x ‚âà y‚Ä≤ ‚Üí x ‚âà y

_IsRightTotal : {A : ùì§ Ãá} {B : ùì• Ãá} (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_IsRightTotal {ùì§} {ùì•} {A} {B} _‚âà_ = (y : B) ‚Üí ‚àÉ[ x Íûâ A ] (x ‚âà y)

_IsLeftTotal : {A : ùì§ Ãá} {B : ùì• Ãá} (_‚âà_ : A ‚Üí B ‚Üí ùì§ ‚äî ùì• Ãá) ‚Üí ùì§ ‚äî ùì• Ãá
_IsLeftTotal {ùì§} {ùì•} {A} {B} _‚âà_ = (x : A) ‚Üí ‚àÉ[ y Íûâ B ] (x ‚âà y)
------------------------------------------------------------------------
-- Some simple functions

id : A ‚Üí A
id x = x

module ‚â°-Reasoning where
  open import Cubical.Foundations.Prelude public
    using (_‚â°‚ü®_‚ü©_; ‚â°‚ü®‚ü©-syntax; _‚àé)

  infix  1 begin_
  infixr 2 _‚â°‚ü®‚ü©_
  
  begin_ : {x y : A} (r : x ‚â° y) ‚Üí x ‚â° y
  begin x=y = x=y

  _‚â°‚ü®‚ü©_ : (x {y} : A) ‚Üí x ‚â° y ‚Üí x ‚â° y
  x ‚â°‚ü®‚ü© x‚â°y = x‚â°y

_‚â§?_ : (m n : ‚Ñï) ‚Üí Dec (m ‚â§ n)
zero  ‚â§? _     = yes tt
suc m ‚â§? zero  = no Œª ()
suc m ‚â§? suc n = m ‚â§? n

record Code (A : ùì§ Ãá) :  ùì§ ‚Å∫ Ãá where
  field
    code   : A ‚Üí A ‚Üí ùì§ Ãá
    r      : (a : A)   ‚Üí code a a
    decode : {a b : A} ‚Üí code a b ‚Üí a ‚â° b

  encode : {a b : A} ‚Üí a ‚â° b    ‚Üí code a b
  encode {a = a} a=b = transport (cong (code a) a=b) (r a)
open Code ‚¶É ... ‚¶Ñ public

record DecEq (A : ùì§ Ãá) : ùì§ Ãá where
  field
    _‚âü_ : (x y : A) ‚Üí Dec (x ‚â° y)
  ‚âü‚ÜíisSet : isSet A
  ‚âü‚ÜíisSet = Discrete‚ÜíisSet _‚âü_
open DecEq ‚¶É ... ‚¶Ñ public

instance
  DecEqUnit : DecEq Unit
  DecEqUnit = record { _‚âü_ = Œª {tt tt ‚Üí yes refl} }

  DecEqBool : DecEq Bool
  _‚âü_ ‚¶É DecEqBool ‚¶Ñ = Cubical.Data.Bool._‚âü_

strict-initial : {X : ùì§ Ãá} ‚Üí (X ‚Üí ‚ä•* {ùì§}) ‚Üí X ‚âÉ (‚ä•* {ùì§})
strict-initial f = f , record { equiv-proof = Œª { () } }
